FORMAT: 1A
HOST: https://api.surfly.com/v2/




# Surfly

With Surfly's <a href="https://www.surfly.com">cobrowsing</a> you'll be able to easily create a Surfly session URL. A Surfly session URL is simple a URL which can be added to any iframe which will result in an instant co-browsing session. 

A Surfly session can be automatically started through: 

 - Widget integration
 - REST API
 
The widget integration is suitable for straightforward on-website integration of a Surfly session. The REST API allows clients to completely integrate Surfly in their own product and hook up directly to our client or agent management system.


## Session Display Options

The appearance of a session can be controlled through different session options:

 - ui_off - disable chatbox control
 - no_videochat - hide video icon
 - docked_only - only start session in docked mode (no text + videochat)
 - no_splash - hide popup while start session
 
 - iframe size settings
  - min_width - set min_width of iframe.
  - min_height - set min_height of iframe.
  - max_width - set max_width of iframe.
  - max_height - set max_height of iframe.
  - set_to_smallest - take follower size into account (default: true)
   
These options can be passed to Surfly through or the Widget or the Session Create REST call.

## Session Control


After the iframe has been created, it can be controlled via postMessage and it will emit messages back to parent.

### Events

The messages sent by Surfly iframes to the parent window are JSON-encoded strings that have the following format:

```json
{"surfly":
  {
    "type": "<event type>"
    "params": {<additional parameters depending on event type}
  }
}
```

<!-- "client_id": <from query string> -->


#### The location of the top iframe has changed

 - type: `"relocated"`
 - params: `{"url": <absolute URL of new location>, "how": <how>}`

 how is `"load"` if the page was loaded, or `"history"` if the URL was changed through history API.

#### Another viewer joined

 - type: `"viewer_joined"`
 - params: `{"count": <the updated total number of viewers>}`

<!-- params: {"client_id": <client_id of the new participant TODO> -->


#### A viewer has left

 - type: `"viewer_left"`
 - params: `{"count": <the updated total number of viewers>}`

<!-- params: {"client_id": <client_id of the new participant TODO> -->

#### Session was finished

 - type: `"session_ended"`
 - params: `{"reason": "<one of the following>"}`
  - `"leader_ended"`     leader ended the session via end the session command
  - `"leader_left"`      leader closed the browser
  - `"leader_timeout"`   leader connection timed out
  - `"api"`              session was ended via HTTP API


#### Error

 This event is sent if the session cannot be joined and ended abuptly.

 - type: "error"
 - params: `{"reason": <on of the following>}`
  - `"other_connection"` happens on if the leader_link was opened elsewhere. The new window/browser becomes the leader and the old leader is kicked out. It also happens if viewer_link was open again on the same browser.
  - `"connect_failed"` happens if WebSocket connection to Surfly cannot be established.

<!--
  - "SESSION_NOT_FOUND"
  - "BROWSER_NOT_SUPPORTED"
-->


#### Message

 - type: `"message"`
 - params: `{"data": "<data>"}`

#### Control over session was transferred to another party

 - type `"control"`
 - params:
  - `"to"`: index of the client that now have the control. Always 0 for leader, 1 or more for a viewer.
  - `"gained"`: if true, the control was just gained; if false, the control was just lost



### Commands

Commands are sent by calling postMessage on the Surfly iframe. The message should be a JSON-encoded object. Currently only the leader frame accepts the command.

#### Relocate

```
{"command": "relocate", "url": "<new url to go to>"}
```

#### End the session

```
{"command": "end"}
```

#### Send a message to other parties

```
{"command": "message", "data": "<data>"}
```

This will broadcast string "<data>" to all other parties in the session.


#### Change controlling party

```
{"command": "control", "to": <client index>}
```

`<client index>` is 0 for leader and 1 or more for viewers.

This will put leader into viewer mode and selected follower will become the pilot of the session. The following actions will now be done by follower:

 - scrolling
 - clicking
 - entering data in forms

If ran by follower currently holding control, it will return control back to leader.


## Widget Integration

### widget options
 
 - widgetkey - unique key for widget.
 - position - Location of the chat button, possible values:
    - "bottomleft"
    - "bottomright"
    - "middleright".
 - hidden(boolean) - hide the button
 - auto_start(boolean) - start the session automatically
 - theme_inverted(boolean) - use the inverted theme



## REST API

The Surfly REST API allows you to integrate the functionality of our dashboard in a programatical manner. With our API you can do the following things: 

 * Clients - Create new clients *(reseller only)*
 * Agents - Manage your agents
 * Sessions - Get an overview of all your session
 * Queue - Manipulate the incoming Queue for your agents
 
To access our API you will need to authenticate by using basic HTTP authentication.  In addition, some API calls require extra information such as:

 * RESELLER_KEY  *(reseller only)*
 * CLIENT_KEY

Both keys can be found on your API page in your dashboard. We recommend that you keep your CLIENT_KEY and RESELLER_KEY secret at all times.



########################################
# Group Agents

Agents related resources of the **Surfly API**


# Agents Collection [/agents/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List all agents [GET]

List all agents for a certain `CLIENT_KEY`.

**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| agent_id | Agent ID  | fOBg4dXAPTHSoil6LywgfYA |
| agent_name | Name of the agent | Peter Pan |
| agent_email | email address of the agent | peter@neverland.net |


+ Response 200 (application/json)

    + Body

            [
                {
                    "agent_id": 1,
                    "agent_name": "Peter Pan",
                    "agent_email": "peter@neverland.net"
                }
            ]

### Create a new agent [POST]

Create a new AGENT
            
**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| agent_name | Name of the agent | Peter Pan |
| agent_email | Email address | peter@neverland.net |


**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| agent_id | agent id | 1 |



+ Request (application/json)

    + Body

            {
                "username": "Peter Pan",
                "agent_email": "peter@neverland.net",
                "password":"Pass@123"
            }
        
+ Response 200 (application/json)

    + Body

            {
                "agent_id": "1" 
            }



# Agent information [/agents/{AGENT_ID}/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + AGENT_ID (string, `2`)

### Get Agent Information [GET]

Get information about a certain agent by `agent_id`

**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| agent_name | Name of the agent | Peter Pan |
| agent_email | Email address | peter@neverland.net |
| id | Agent Id | 2


+ Response 200 (application/json)

    + Body
    
            {
                "agent_id": 2,
                "agent_name": "Peter Pan",
                "agent_email": "peter@neverland.net"
            }


### Update an agent [PUT]

Update a AGENT
            
**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| agent_name (optional) | Name of the agent | Peter Pan |
| agent_email (optional) | Email address | peter@neverland.net |


**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| agent_id | agent id | 2 |

+ Request (application/json)

    + Body

            {
                "username": "Peter",
                "agent_email": "peter@neverland.com"
            }
        
+ Response 200 (application/json)

    + Body

            {
                "agent_name": "Peter",
                "agent_id": 2,
                "agent_email": "peter@neverland.com"
            }

### Delete an agent [DELETE]

Delete an Agent

+ Response 200 (application/json)

    + Body

            {
                "response": "Agent has been removed successfully"
            }





########################################
# Group Sessions
Sessions related resources of the **Surfly API**




# Sessions Collection [/sessions/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
 

### List all Sessions [GET]

List all session for a certain `CLIENT_KEY`


**Response Body:**


|  Name | Description | Example |
| ---------------| ------------| --------|
| session_id | unique ID of the session | fOBg4dXAPTHSoil6LywgfYA |
| agent_id |  ID of the agent | AEOUoeauAOEUpaoeu |
| viewer_link | the link that must be opened in a ***viewer***. | https://session.surfly.com/fHrD6TMmRrurMevgidxyw |
| start_time | time the session started | Fri, 10 okt 10:20 AM |
| duration | Length of the session | 123 |


+ Response 200 (application/json)

   + Body

            [{
                "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
                "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
                "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
                "start_time": "Fri, 10 okt 10:20 AM",
                "duration": 123
            }]

# Active Sessions Collection [/sessions/?api_key={API_KEY}&active_session=true]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
 

### List all Active Sessions [GET]

List all ACTIVE session for a certain `CLIENT_KEY`


**Response Body:**


|  Name | Description | Example |
| ---------------| ------------| --------|
| session_id | unique ID of the session | fOBg4dXAPTHSoil6LywgfYA |
| agent_id |  ID of the agent | AEOUoeauAOEUpaoeu |
| viewer_link | the link that must be opened in a ***viewer***. | https://session.surfly.com/fHrD6TMmRrurMevgidxyw |
| start_time | time the session started | Fri, 10 okt 10:20 AM |
| duration | Length of the session | 123 |

+ Response 200 (application/json)

   + Body

            [{
                "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
                "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
                "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
                "start_time": "Fri, 10 okt 10:20 AM",
                "duration": 123
            }]

# Agent Sessions Collection [/sessions/?api_key={API_KEY}&active_session=true&agent_id=1&year=2015&month=01]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
 

### List Active Sessions for Agent [GET]

List all ACTIVE sessions for a certain `Agent`, `Year`, `Month`

active_session, agent_id, year, month are optional

**Response Body:**


|  Name | Description | Example |
| ---------------| ------------| --------|
| session_id | unique ID of the session | fOBg4dXAPTHSoil6LywgfYA |
| agent_id |  ID of the agent | AEOUoeauAOEUpaoeu |
| viewer_link | the link that must be opened in a ***viewer***. | https://session.surfly.com/fHrD6TMmRrurMevgidxyw |
| start_time | time the session started | Fri, 10 okt 10:20 AM |
| duration | Length of the session | 123 |

+ Response 200 (application/json)

   + Body

            [{
                "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
                "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
                "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
                "start_time": "Fri, 10 okt 10:20 AM",
                "duration": 123
            }]



### Create a session [POST]

**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| url | Url to co-browse | http://www.google.com |
| agent_id | ID of the agent | fOBg4dXAPTHSoil6LywgfYA |


**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| id | session id, which can be used to end the session | fOBg4dXAPTHSoil6LywgfYA |
| leader_link |  the link that must be opened in a ***leader*** (controlling) browser. It has a 2 minute time out attached to it, if not used within that time, the session will be closed. | https://session.surfly.com/mWdJBh0xZQMmSlx0dhbUNSg |
| viewer_link | the link that must be opened in a ***viewer***. | https://session.surfly.com/fHrD6TMmRrurMevgidxyw |


+ Request (application/json)

    + Body

            {
                "url": "http://www.surfly.com/",
                "agent_id": 1
            }
        
+ Response 200 (application/json)

    + Body

            {
                "id": "fm6pApJ18SvqlVEpnCx8Qmg",
                "agent_id": "jGBAOLFaRv6NG57AZubK8A",
                "viewer_link": "https://session.surfly.com/fm6pApJ18SvqlVEpnCx8Qmg",
                "start_time": "2014-12-11T15:12:22.447Z",
                "end_time": null,
                "duration": null,
                "ip_leader": "127.0.0.1",
                "leader_link": "https://session.surfly.com/mUBRJyslQStVXPEwUwFyQ",
                "ip_follower": "127.0.0.1",
                "emails_send": [
                {
                  "to": [],
                  "from": null
                }
                ]
            }


# Session Information [/sessions/{SESSION_ID}/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + SESSION_ID (string, `fuSHr0sRQ1usugvheahwQ`)


### Get session information [GET]

Get information about a certain session or end a certain session.

**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| id | session id, which can be used to end the session | fOBg4dXAPTHSoil6LywgfYA |
| agent_id |  ID of the agent | AEOUoeauAOEUpaoeu |
| viewer_link | the link that must be opened in a ***viewer***. | https://session.surfly.com/fHrD6TMmRrurMevgidxyw |
| start_time | time the session started | Fri, 10 okt 2014 10:20:24 |
| end_time | time the session ended | Fri, 10 okt 2014 10:51:46 |
| duration | Length of the session (in seconds) |  1882 |
| ip_leader | IP address of leader | 192.168.1.1 |
| ip_followers | comma seperated list of IP's of followers | 10.0.0.1, 10.0.0.2 |
| emails_send | list of email invatiations send | agent@company.com, client@company2.com |


+ Response 200 (application/json)

    + Body

            {
                "id": "fwqcOuuMwTty7ii3kcA8Q",
                "agent_id": 1,
                "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
                "start_time": "Fri, 10 okt 2014 10:20:24",
                "end_time": "Fri, 10 okt 2014 10:51:46",
                "duration": 1882,
                "ip_leader": "192.168.1.1",
                "leader_link": "",
                "ip_follower": "",
                "emails_send": [
                                    {
                                        "to": [],
                                        "from": null
                                    }
                                ]
            }


### End a session [DELETE]

Simply ends a session.

+ Response 200 (application/json)

    + Body
    
            {
                "response":""
            }








########################################
# Group Queue

Manage and maintain the QUEUE for a certain client.

# Queue Collection [/queue/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List all Active Sessions in the Queue [GET]

List all items in the support Queue for a certain `CLIENT_KEY`.


+ Response 200 (application/json)

    + Body

            [
                {
                    "start_time": 1,
                    "session": 1,
                    "url": ""
                }
            ]
            
### Add an item to the Queue [POST]

A new item can be put in the Queue, this item will auto expire after 30 seconds. In order to make sure that your item stays alive you will need to repeat the request with the same ID.

**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| url | Url to co-browse | http://www.google.com |
| id | Session ID of item in the Queue | fuSHr0sRQ1usugvheahwQ |


**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| id | Queue id, which can be used to identify the item in the queue  | fOBg4dXAPTHSoil6LywgfYA |


+ Request (application/json)

    + Body

            {
                "url": "http://www.surfly.com/",
                "id": "fuSHr0sRQ1usugvheahwQ"
            }
        
+ Response 200 (application/json)

    + Body

            {
                "start_time": "",
                "session": 1,
                "url": ""
            }


# Queue information [/queue/{QUEUE_ID}/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + QUEUE_ID (string, `fuSHr0sRQ1usugvheahwQ`)

### Get Queue Information [GET]

Get information about a certain queue by `queue_id`

**Response Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| id | Session ID| fuSHr0sRQ1usugvheahwQ |
| start_time | Queue Start Time | 2014-11-03T08:22:41.075Z |
| URL | Session URL | http://surfly.com/ |


+ Response 200 (application/json)

    + Body

            {
                "start_time": "2014-11-03T08:22:41.075Z",
                "session": "fuSHr0sRQ1usugvheahwQ",
                "url": "http://surfly.com/"
            }


### Remove item from the Queue [DELETE]

**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| id | ID of item in the Queue (optional) | 25 |


+ Request (application/json)

    + Body

            {
                "id": "fuSHr0sRQ1usugvheahwQ"
            }
        
+ Response 200 (application/json)

    + Body

            {
                "detail":""
            }



########################################
# Group Clients
Clients related resources of the **Surfly API**


# Clients Collection [/clients/{RESELLER_KEY}/?api_key={API_KEY}]
Reseller functionality

+ Parameters
    + RESELLER_KEY (string, `02fbfd63b54341c1828e6a2426311788`)
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### Lists all your clients [GET]

Return all your clients by `RESELLER_KEY`

**Repsonse Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| company_name | Name of Company | Neverland |
| client_key | Client Key | AOEUaoeuntsPDe |
| agent_count | Number of agents | 15 |
| widget_key | Widget Key | 24d1414c71a94cbf9f205ed4fc4999b5 |
| rest_key | Rest Key | 3b57bd2db21c46d2875508b982968d26 |
| domains | Domains | surfly.com, *.surfly.com |

+ Response 200 (application/json)


    + Body

            [{
                "company_name": "Neverland",
                "client_key": "AOEUaoeuntsPDe",
                "agent_count": 15,
                "widget_key": "24d1414c71a94cbf9f205ed4fc4999b5",
                "rest_key": "3b57bd2db21c46d2875508b982968d26",
                "domains": "surfly.com, *.surfly.com"
            }]

### Create a new client [POST]

Add a new client as `RESELLER_KEY`

**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| company_name | Name of new company | Neverland |

**Repsonse Body:**

A list of objects containing the following parameter:

|  Name | Description | Example |
| ---------------| ------------| --------|
| company_name | Name of company | Neverland |
| client_key | Client Key | AOEUaoeuntsPDe |

+ Request (application/json)

    + Body

            {
                "company_name": "Test User"
            }
        
+ Response 200 (application/json)

    + Body

            {
                "company_name": "Neverland",
                "client_key": "fOBg4dXAPTHSoil6LywgfYA"
            }
    

# Client Information [/clients/{RESELLER_KEY}/{CLIENT_ID}/?api_key={API_KEY}]

+ Parameters
    + RESELLER_KEY (string, `02fbfd63b54341c1828e6a2426311788`)
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + CLIENT_ID (string, `63668234b4aa19dd436e6a76ab8ae000`)

### Get Client Information [GET]

Get information about a specific `client_id`

**Repsonse Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| company_name | Name of company | Neverland |
| client_key | Client Key | AOEUaoeuntsPDe |
| agent_count | Number of agents | 15 |
| widget_key | Widget Key | 24d1414c71a94cbf9f205ed4fc4999b5 |
| rest_key | Rest Key | 3b57bd2db21c46d2875508b982968d26 |
| domains | Domains | surfly.com, *.surfly.com |


+ Response 200 (application/json)

    + Body
    
            {
                "company_name": "Neverland",
                "client_key": "AOEUaoeuntsPDe",
                "agent_count": 15,
                "widget_key": "24d1414c71a94cbf9f205ed4fc4999b5",
                "rest_key": "3b57bd2db21c46d2875508b982968d26",
                "domains": "surfly.com, *.surfly.com"
            }

### Update a client [PUT]

Update a client as `RESELLER_KEY`

**Request Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| company_name | New Name of company | Peter Pan |

**Repsonse Body:**

A list of objects containing the following parameter:

|  Name | Description | Example |
| ---------------| ------------| --------|
| company_name | Name of company | Peter Pan |
| client_key | Client Key | AOEUaoeuntsPDe |

+ Request (application/json)

    + Body

            {
                "company_name": "Peter Pan"
            }
        
+ Response 200 (application/json)

    + Body

            {
                "company_name": "Peter Pan"
            }

### Delete the Client [DELETE]

Delete the client

+ Response 200 (application/json)

    + Body

            {
                "response":"Client has been removed Successfully"
            }





# Reseller Sessions Collection [/sessions/?api_key={API_KEY}&clientkey={CLIENT_KEY}&active_session=true&year=2015&month=01]

+ Parameters
    + CLIENT_KEY (string, `00063668234b4aa19dd436e6a76ab8ae`)
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
 

### Example: List Active Sessions for Reseller's Client [GET]

List all ACTIVE sessions for a certain `Client`, `Year`, `Month`

active_session, agent_id, year, month are optional

**Response Body:**


|  Name | Description | Example |
| ---------------| ------------| --------|
| session_id | unique ID of the session | fOBg4dXAPTHSoil6LywgfYA |
| agent_id |  ID of the agent | AEOUoeauAOEUpaoeu |
| viewer_link | the link that must be opened in a ***viewer***. | https://session.surfly.com/fHrD6TMmRrurMevgidxyw |
| start_time | time the session started | Fri, 10 okt 10:20 AM |
| duration | Length of the session | 123 |

+ Response 200 (application/json)

   + Body

            [{
                "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
                "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
                "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
                "start_time": "Fri, 10 okt 10:20 AM",
                "duration": 123
            }]



########################################
# Group Invoice
Invoice related resources of the **Surfly API**


# Invoice Collection [/get/invoice/details/?api_key={API_KEY}]
Reseller functionality

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### Lists your current month's invoice [GET]

Return your current month's invoice by client_key

**Repsonse Body:**

|  Name | Description | Example |
| ---------------| ------------| --------|
| item_list | List of company logs | amount, description, unit_price, quantity |
| issue_date |  Invoice Issue Date | 2015-6-06 |
| to_address | Address of the company Admin or Reseller | ABC,1221,Netherlands,4343 |
| from_address | Address of the Surfly Admin | Surfly Admin, Netherlands |
| payment_term | Payment term in days | 14 |
| sub_total | Subtotal of the Invoice | 1490 |
| send_invoice | Send invoice to mail | false |
| currency | Currency | euro |
| invoice_number | Invoice ID | 5 |
| total | Total amount of invoice | 1490 |

+ Response 200 (application/json)

    + Body

            [{
                "item_list": [{
                    "amount": 40,
                    "description": "Date from 2015-06-29 to 2015-01-29",
                    "unit_price": 0.67,
                    "quantity": 60
                }],
                "issue_date": "2015-6-06",
                "to_address": "ABC,1221,Netherlands,4343",
                "from_address": "Surfly Admin, Netherlands",
                "payment_term": 14,
                "sub_total": 1490,
                "send_invoice": false,
                "currency": "euro",
                "invoice_number": 5,
                "total": 1490
            }]


