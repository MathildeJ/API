FORMAT: 1A
HOST: https://api.surfly.com/v2/


# The Co-Browsing API

While Surfly can be used directly from the Surfly website we also have an
extensive API in order for our clients to be able to integrate Surfly tightly
into their current website or web application. One can even completely automate
the management of client and agent creation through our REST API.

The following types of customizations of Surfly can be achieved:

 - Website Integration
 - Full Session Continuation
 - Session Customization
 - Customize session start or join page
 - Application Integration
 - Agent Creation
 - Reseller Automatization


##### Website Integration

Add Surfly to your website and allow the visitors of your website to create a
support request by clicking on our support button.  The style and color of this
button can be fully customized to match your applications or website’s look and
feel.


##### Session Customization

Enable or disable the videochat, allow users to navigate to different websites
or not, use a textchat mode or a pure docked mode or for our Enterprise
customers completely remove all Surfly UI and fully customize the look and feel
of the session.

##### Custom session start or join page

Start a session from your own website or maybe even create a specific invite
page or landing page for your clients.

##### Full Session Continuation

When your users are already logged in on your website you probably don’t want
that starting a Surfly session will break the flow and or require them to login
again. Surfly can pick up the session exactly where the user is

##### Deep Application Integration

Session can be started through the Javascript and the REST API. By using the
REST API you can integrate our websharing technology in your own application or
build a thin layer around our technology.


##### Automatic Agent Creation

Agents can be added through the admin interface, but if your agents are more
dynamic these can also be added and removed through our REST API.

##### Reseller Automatization

Resellers can use our API to create fresh new Sufly clients, decide whether you
want to invoice them directly or if we should handle this for you.


These type of customizations or integrations can be built through 3 different
ways in how one can interface with Surfly:

 - The Surfly Code Snippet
 - The Javascript API
 - The REST API


----
#  The Surfly Code Snippet

Surfly's code snippet is a small snippet of Javascript code that can be copied
into your website template.

## The Surfly Widget and extension

Adding the Code Snippet is relatively straightforward. The snippet can be
obtained from the 'integration' page on your account settings panel.

Copy the piece of code and paste it somewhere in the source of your
website or application. We make sure to load the Surfly code in an asynchronous
and non-blocking way in order to not have any effect on your page load times.

The snippet comes with lots of options which we will
detail below.

### The extension

If you do not want to immediately add the code to your website but still want to
take a look at how Surfly's integration can work you can use our Chrome extension. This
extension will add our Javascript snippet code to any website you are currently
browsing, it will also give you all the options to easily configure the snippet
and try out various settings.

In order to install the extension do the following:

 1. Download the Chrome Extension
 2. Open Chrome
 3. Go to  Tools / Preferences / Settings   (depends on your OS)
 4. Go to ‘Extensions’
 5. Click on ‘Load unpacked extension’
 6. Point it to the downloaded file


----
# Customizing Surfly Session Behavior

We allow a variety of options in how Surfly can be customized. These can
be configured in the Javascript snippet, as an option in a REST call or by simply
switching a flag in the Chrome extension.

## Session Interaction Options


|  Option | Default | Description |
| ---------------| ------------|------------|
| agent_can_request_control | false | Can the agent request control after which it can be granted |
| agent_can_take_control | false | Can the agent take control without requirement that the controller needs to grant it |
| on_end_redirect_follower_to_queue | false | After session end return the follower to the Surfly Queue page |
| leader_redirect_url | false | After session end redirect the leader to a custom URL |
| follower_redirect_url | false | After session end redirect the follower to a custom URL |
| soft_session_end | false | After session end leader stays in the session |
| autohide_control | false | Do not show the widget when no agent has joined the session |
| autohide_button | true | Hide the Surfly button when no agent is available |
| videochat | true | Is videochat allowed |
| splash | false | Do we need to show the splash screen on session start |
| newurl  | true | Should we show the 'newurl button' in the widget |
| sharing_button | true | Should we show the 'sharing button' in the widget |
| block_until_agent_joins | true | In case of Surfly button, block the screen until a follower joins |
| stealth_mode | true | When enabled, users can use <CTRL> + <ENTER> to start a Surfly session |
| hide_until_agent_joins | true | In case of Surfly button, do not show the cobrowsing window until a follower joins the session |


#### Session Appearance Options

|  Option | Default | Description |
| ---------------| ------------|------------|
| white_label | false | Do not show a Surfly logo (enterprise only) |
| ui_off | false | Just co-browsing no user interface (enterprise only) |
| docked_only | false | Only show the control options, do not show a video / textchat box |
| dock_top_position | false | By default we place the dock at the bottom-left, with this option you can put it on top |
| set_to_smallest | true | By default we resize the active viewport to viewport size of the participant with the smallest screen. This can be disabled |
| min_width | 0 | Restrict minimal width of the viewport |
| min_height | 0 | Restrict minimal height of the viewport |
| max_width | 0 | Restrict max width of the viewport |
| max_height | 0  | Restrict max height of the viewport |


## Support Button Appearance

|  Option | Default | Description |
| ---------------| ------------|------------|
| position | 'bottomleft' | Where should we place the Surfly support button, options are, 'bottomleft', 'bottomright', 'middleright' |
| hidden | false | Do not show the button |
| auto_start | false | Instead of showing a button, immediately start a session |
| theme_font_size | 14 | size of the text in the button |
| theme_font_color | white | support button foreground color|
| theme_font_background | surfly-red | support button background color |


## Field Masking

The business plan comes with the option to enable field-masking. This allows you to set a
special attribute on a FORM element called `surfly_private`. This will then prevent Surfly
from actually synchronizing the content of the field to followers. This can be useful for
sensitive fields such as creditcard numbers or social security numbers.

----

# Customizing the User Flow

The flexibility of Surfly allows it to be used with different types of usecases.
This allows you not only to customize how a Surfly session looks but also how a
session can be integrated in your work flow.


## Automatically starting a session


#### Using auto_start

If you want to allow your clients to start a session from a branded page you can
simply include our javascript snippet and set the 'auto_start' flag to true.


#### Using a special anchor link

Another way to start a session is to add the anchor '#surflystart' to any page
on which the Javascript snippet has been added. This can be used in various
ways, if you want to create a customized button that starts a session you can
simply put it within a "A" anchor. For example:

```html
<a href="#surflystart"> Start a surfly session </a>
```


## Detecting a Surfly Session

You might want to change the behaviour of the website depending whether it is a
Surfly session or not. Example use cases are for example hiding a customized 'session
start' button within the Surfly session or remove certain toolbars for a nicer
integration.

#### From within Javascript

To detect a Surfly session from the client side one can simply
check for the existence of a global variable called `__surfly`

For example, to hide a button within a Surfly session one could do the
following:

```javascript
if (window.__surfly) {
    document.getElementById('session_start_button').display = "none";
}

```



#### At the backend

As all Surfly sessions will originate from our proxy servers this could be used
as a way to identify whether the request comes from Surfly or a client directly.
However, we use different IP ranges for our proxy servers and they also change
over time, so we recommend a different way to do this.

On each session that comes through our proxy, we will add a 'X-Forwarded-For'
header that points to the original IP of the 'leader'.

When creating a request one can also set the 'headers' option (in both the
Javascript call and the REST call) to add aditional headers. These headers can
used to for example add an "Authorization" header to allow to user to be logged
in on your own backend or a custom header which can be used as an identifier. We
will send these headers with each request made during the session.


## Session Continuation

The high performance of Surfly can be attributed to our proxy approach. If a
user wants to continue the web-session as-is it requires that we can transfer
all information to our proxy.

This feature is called 'session-continuation' and works as follows:

 - A Surfly session is started on the current website from the same url in a
   hidden iFrame
 - The widget makes sure that Surfly knows about session variables (cookies)
 - After the session has been started we synchronize the current state with the
   fresh state loaded through the iframe.


In order to fully synchronize all session variables we need to be able to send over all
session specific cookies. These cookies can be passed to the Javascript Widget
or a REST call.

When you have trouble finding out the exact cookies you'll need to pass, you can
also use a different approach. The session can also be set up through a
'continuation point'. A continuation point is a helper script run on the
background that can made all session variables available through a secure and
unique link. An example of such a continuation point can be found here:
https://github.com/surfly/continuation

The above behaviour can also be demonstrated through the Surfly Chrome
extension mentioned above. This Chrome extension will take care of the
continuation by itself, extract the session cookies and pass them along to
Surfly when starting a session.

If you need more help with this please contact us at support@surfly.com, we can
consult on the implementation or build the integration for you.



## Change Queue Behaviour

It is possible to integrate Surfly on your website with some sort of support
button. Once a user clicks this button, his support request will be queue'd
where one of the available agents can then answer the request. The user will be
the 'leader' of the session and the agent who joins will be the follower of the
session.

Surfly comes with relatively basic Queue functionality. If you want to integrate
the Queue functionality in your own application or even hook it up to a
completely different Queue system it can be accomplished in a few different ways:

#### Set a custom queue endpoint

You can configure the 'QUEUE_ENDPOINT' in the Javascript snippet to specify where
we should fire a request each time a new user wants to start a session.

As long as an agent is Queue'd, we will fire a POST request to this endpoint
containing the following JSON in request body:


```
{
    "url": <actual url to start a session on>,
    "id": <session_id>,
    "viewer_link": <the link the agent needs to open to join the session>,
    "ip_address": <ip address of the website visitor>
}
```

Your controller that handles this request can then display or dispatch the
viewer link to any of the available agents.

Endpoint is expected to respond with a JSON object. It must contain at least one
field - `identifier`, which should be a unique string identifying the current session:

```
{
    "identifier": "<unique_id>",
    ...additional session metadata...
}
```

We will pass the endpoint response to `QUEUE_CALLBACK` every time (see below), so you can
store some session metadata in additional fields.


#### Set up custom Javascript queue handler

If you want to handle the Queue functionality yourself completely you can also
provide us with a custom Javascript function object in `QUEUE_HANDLER` option.

If it is specified, we will call `QUEUE_HANDLER` when a user requests a Surfly
session (instead of making AJAX call to `QUEUE_ENDPOINT`). `QUEUE_HANDLER`
will be given two arguments:

- JSON object with session information (see request format for `QUEUE_ENDPOINT` above)
- a success callback function. `QUEUE_HANDLER` must call this callback after a successful
  queue join. You must pass a session metadata object as a first argument (see
  response format for `QUEUE_ENDPOINT`)


#### Tracking queue status

You can also provide a Javascript function in `QUEUE_CALLBACK` option to trace the status of the queue.
We will call this function every time when a user joins, rejoins, or leaves the queue.

It will be called with two arguments:

 - status (true or false)
   - true   (on successful join or rejoin)
   - false  (after cancel, close)
 - session - an object describing the session (this is received from `QUEUE_HANDLER` or `QUEUE_ENDPOINT`)

----

# Customize the Session Interface

After the iframe has been created, it can be controlled via postMessage and it
will emit messages back to the parent frame. One can start a Surfly session with
the UI=OFF flag as described above.

## Events

The messages sent by Surfly iframes to the parent window are JSON-encoded strings that have the following format:

```json
{"surfly":
  {
    "type": "<event type>"
    "params": {<additional parameters depending on event type}
  }
}
```

<!-- "client_id": <from query string> -->


### The location of the top iframe has changed

 - type: `"relocated"`
 - params: `{"url": <absolute URL of new location>, "how": <how>}`

 how is `"load"` if the page was loaded, or `"history"` if the URL was changed through history API.

### Another viewer joined

 - type: `"viewer_joined"`
 - params: `{"count": <the updated total number of viewers>}`

<!-- params: {"client_id": <client_id of the new participant TODO> -->


### A viewer has left

 - type: `"viewer_left"`
 - params: `{"count": <the updated total number of viewers>}`

<!-- params: {"client_id": <client_id of the new participant TODO> -->

### Session was finished

 - type: `"session_ended"`
 - params: `{"reason": "<one of the following>"}`
  - `"leader_ended"`     leader ended the session via end the session command
  - `"leader_left"`      leader closed the browser
  - `"leader_timeout"`   leader connection timed out
  - `"api"`              session was ended via HTTP API


### Error

 This event is sent if the session cannot be joined and ended abuptly.

 - type: "error"
 - params: `{"reason": <on of the following>}`
  - `"other_connection"` happens on if the leader_link was opened elsewhere. The new window/browser becomes the leader and the old leader is kicked out. It also happens if viewer_link was open again on the same browser.
  - `"connect_failed"` happens if WebSocket connection to Surfly cannot be established.

<!--
  - "SESSION_NOT_FOUND"
  - "BROWSER_NOT_SUPPORTED"
-->


### Message

 - type: `"message"`
 - params: `{"data": "<data>"}`

### Control over session was transferred to another party

 - type `"control"`
 - params:
  - `"to"`: index of the client that now have the control. Always 0 for leader, 1 or more for a viewer.
  - `"gained"`: if true, the control was just gained; if false, the control was just lost



## Commands

Commands are sent by calling postMessage on the Surfly iframe. The message should be a JSON-encoded object. Currently only the leader frame accepts the command.

### Relocate

```
{"command": "relocate", "url": "<new url to go to>"}
```

### End the session

```
{"command": "end"}
```

### Send a message to other parties

```
{"command": "message", "data": "<data>"}
```

This will broadcast string `"<data>"` to all other parties in the session.


### Change controlling party

```
{"command": "control", "to": <client index>}
```

`<client index>` is 0 for leader and 1 or more for viewers.

This will put leader into viewer mode and selected follower will become the pilot of the session. The following actions will now be done by follower:

 - scrolling
 - clicking
 - entering data in forms

If ran by follower currently holding control, it will return control back to leader.


----
# REST API

The Surfly REST API allows you to integrate the functionality of our dashboard in a programatical manner. With our API you can do the following things: 

 * Clients - Create new clients *(reseller only)*
 * Agents - Manage your agents
 * Sessions - Get an overview of all your session
 * Queue - Manipulate the incoming Queue for your agents
 
To access our API you will need to authenticate by using basic HTTP authentication.  In addition, some API calls require extra information such as:

 * RESELLER_KEY  *(reseller only)*
 * CLIENT_KEY

Both keys can be found on your API page in your dashboard. We recommend that you keep your CLIENT_KEY and RESELLER_KEY secret at all times.



########################################
# Group Agents


# Agents Collection [/agents/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List all agents [GET]


+ Response 200 (application/json)

        [
            {
                "agent_id": 1,
                "agent_name": "Peter Pan",
                "agent_email": "peter@neverland.net"
            }
        ]

### Create a new agent [POST]


+ Request (application/json)

        {
            "username": "Peter Pan",
            "agent_email": "peter@neverland.net",
            "password":"Pass@123"
        }

+ Response 200 (application/json)

        {
            "agent_id": "1" 
        }



# Agent information [/agents/{AGENT_ID}/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + AGENT_ID (string, `2`)

### Get Agent Information [GET]


+ Response 200 (application/json)

        {
            "agent_id": 2,
            "agent_name": "Peter Pan",
            "agent_email": "peter@neverland.net"
        }


### Update an agent [PUT]

+ Request (application/json)

        {
            "username": "Peter",
            "agent_email": "peter@neverland.com"
        }

+ Response 200 (application/json)

        {
            "agent_name": "Peter",
            "agent_id": 2,
            "agent_email": "peter@neverland.com"
        }

### Delete an agent [DELETE]


+ Response 200 (application/json)

        {
            "response": "Agent has been removed successfully"
        }





########################################
# Group Sessions


# Sessions Collection [/sessions/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List all Sessions [GET]


+ Response 200 (application/json)

        [{
            "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
            "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
            "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
            "start_time": "Fri, 10 okt 10:20 AM",
            "duration": 123
        }]

# Active Sessions Collection [/sessions/?api_key={API_KEY}&active_session=true]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List all Active Sessions [GET]


+ Response 200 (application/json)

        [{
            "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
            "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
            "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
            "start_time": "Fri, 10 okt 10:20 AM",
            "duration": 123
        }]

# Agent Sessions Collection [/sessions/?api_key={API_KEY}&active_session=true&agent_id=1&year=2015&month=01]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List Active Sessions for Agent [GET]


+ Response 200 (application/json)

        [{
            "session_id": "fOBg4dXAPTHSoil6LywgfYA", 
            "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
            "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
            "start_time": "Fri, 10 okt 10:20 AM",
            "duration": 123
        }]



### Create a session [POST]


+ Request (application/json)

        {
            "url": "http://www.surfly.com/",
            "format_session_id": false,
            "headers": [],
            "agent_id": 1
        }

+ Response 200 (application/json)

        {
            "id": "fm6pApJ18SvqlVEpnCx8Qmg",
            "agent_id": "jGBAOLFaRv6NG57AZubK8A",
            "viewer_link": "https://session.surfly.com/fm6pApJ18SvqlVEpnCx8Qmg",
            "start_time": "2014-12-11T15:12:22.447Z",
            "end_time": null,
            "duration": null,
            "ip_leader": "127.0.0.1",
            "leader_link": "https://session.surfly.com/mUBRJyslQStVXPEwUwFyQ",
            "ip_follower": "127.0.0.1",
            "emails_send": [
            {
              "to": [],
              "from": null
            }
            ]
        }


# Session Information [/sessions/{SESSION_ID}/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + SESSION_ID (string, `fuSHr0sRQ1usugvheahwQ`)


### Get session information [GET]


+ Response 200 (application/json)

        {
            "id": "fwqcOuuMwTty7ii3kcA8Q",
            "agent_id": 1,
            "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q", 
            "start_time": "Fri, 10 okt 2014 10:20:24",
            "end_time": "Fri, 10 okt 2014 10:51:46",
            "duration": 1882,
            "ip_leader": "192.168.1.1",
            "leader_link": "",
            "ip_follower": "",
            "emails_send": [
                                {
                                    "to": [],
                                    "from": null
                                }
                            ]
        }


### End a session [DELETE]


+ Response 200 (application/json)

        {
            "response":""
        }








########################################
# Group Queue


# Queue Collection [/queue/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### List all Active Sessions in the Queue [GET]


+ Response 200 (application/json)

        [
            {
                "start_time": 1,
                "session": 1,
                "url": ""
            }
        ]

### Add an item to the Queue [POST]


+ Request (application/json)

        {
            "url": "http://www.surfly.com/",
            "id": "fuSHr0sRQ1usugvheahwQ"
        }

+ Response 200 (application/json)

        {
            "start_time": "",
            "session": 1,
            "url": ""
        }


# Queue information [/queue/{QUEUE_ID}/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + QUEUE_ID (string, `fuSHr0sRQ1usugvheahwQ`)

### Get Queue Information [GET]


+ Response 200 (application/json)

        {
            "start_time": "2014-11-03T08:22:41.075Z",
            "session": "fuSHr0sRQ1usugvheahwQ",
            "url": "http://surfly.com/"
        }


### Remove item from the Queue [DELETE]


+ Request (application/json)

        {
            "id": "fuSHr0sRQ1usugvheahwQ"
        }

+ Response 200 (application/json)

        {
            "detail":""
        }



########################################
# Group Clients

# Clients Collection [/clients/{RESELLER_KEY}/?api_key={API_KEY}]

+ Parameters
    + RESELLER_KEY (string, `02fbfd63b54341c1828e6a2426311788`)
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### Lists all your clients [GET]

+ Response 200 (application/json)


        [{
            "company_name": "Neverland",
            "client_key": "AOEUaoeuntsPDe",
            "agent_count": 15,
            "widget_key": "24d1414c71a94cbf9f205ed4fc4999b5",
            "rest_key": "3b57bd2db21c46d2875508b982968d26",
            "domains": "surfly.com, *.surfly.com"
        }]

### Create a new client [POST]


+ Request (application/json)

        {
            "company_name": "Test User"
        }

+ Response 200 (application/json)

        {
            "company_name": "Neverland",
            "client_key": "fOBg4dXAPTHSoil6LywgfYA"
        }

# Client Information [/clients/{RESELLER_KEY}/{CLIENT_ID}/?api_key={API_KEY}]

+ Parameters
    + RESELLER_KEY (string, `02fbfd63b54341c1828e6a2426311788`)
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
    + CLIENT_ID (string, `63668234b4aa19dd436e6a76ab8ae000`)

### Get Client Information [GET]

+ Response 200 (application/json)

        {
            "company_name": "Neverland",
            "client_key": "AOEUaoeuntsPDe",
            "agent_count": 15,
            "widget_key": "24d1414c71a94cbf9f205ed4fc4999b5",
            "rest_key": "3b57bd2db21c46d2875508b982968d26",
            "domains": "surfly.com, *.surfly.com"
        }

### Update a client [PUT]


+ Request (application/json)

        {
            "company_name": "Peter Pan"
        }

+ Response 200 (application/json)

        {
            "company_name": "Peter Pan"
        }

### Delete the Client [DELETE]

+ Response 200 (application/json)

        {
            "response":"Client has been removed Successfully"
        }





# Reseller Sessions Collection [/sessions/?api_key={API_KEY}&clientkey={CLIENT_KEY}&active_session=true&year=2015&month=01]

+ Parameters
    + CLIENT_KEY (string, `00063668234b4aa19dd436e6a76ab8ae`)
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)
 

### Example: List Active Sessions for Reseller's Client [GET]


+ Response 200 (application/json)

        [{
            "session_id": "fOBg4dXAPTHSoil6LywgfYA",
            "agent_id": "fOBg4dXAPTHSoil6LywgfYA",
            "viewer_link": "https://session.surfly.com/fwqcOuuMwTty7ii3kcA8Q",
            "start_time": "Fri, 10 okt 10:20 AM",
            "duration": 123
        }]



########################################
# Group Invoice


# Invoice Collection [/get/invoice/details/?api_key={API_KEY}]

+ Parameters
    + API_KEY (string, `3b57bd2db21c46d2875508b982968d26`)

### Lists your current month's invoice [GET]

+ Response 200 (application/json)

        [{
            "item_list": [{
                "amount": 40,
                "description": "Date from 2015-06-29 to 2015-01-29",
                "unit_price": 0.67,
                "quantity": 60
            }],
            "issue_date": "2015-6-06",
            "to_address": "ABC,1221,Netherlands,4343",
            "from_address": "Surfly Admin, Netherlands",
            "payment_term": 14,
            "sub_total": 1490,
            "send_invoice": false,
            "currency": "euro",
            "invoice_number": 5,
            "total": 1490
        }]


